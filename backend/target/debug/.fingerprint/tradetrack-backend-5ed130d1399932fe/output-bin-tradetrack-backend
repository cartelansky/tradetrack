{"$message_type":"diagnostic","message":"implementation is not supported in `trait`s or `impl`s","code":null,"level":"error","spans":[{"file_name":"src\\db.rs","byte_start":3896,"byte_end":3919,"line_start":119,"line_end":119,"column_start":5,"column_end":28,"is_primary":true,"text":[{"text":"    impl Clone for Database {","highlight_start":5,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider moving the implementation out to a nearby module scope","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: implementation is not supported in `trait`s or `impl`s\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\db.rs:119:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m119\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    impl Clone for Database {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: consider moving the implementation out to a nearby module scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the name `User` is defined multiple times","code":{"code":"E0255","explanation":"You can't import a value whose name is the same as another value defined in the\nmodule.\n\nErroneous code example:\n\n```compile_fail,E0255\nuse bar::foo; // error: an item named `foo` is already in scope\n\nfn foo() {}\n\nmod bar {\n     pub fn foo() {}\n}\n\nfn main() {}\n```\n\nYou can use aliases in order to fix this error. Example:\n\n```\nuse bar::foo as bar_foo; // ok!\n\nfn foo() {}\n\nmod bar {\n     pub fn foo() {}\n}\n\nfn main() {}\n```\n\nOr you can reference the item with its parent:\n\n```\nfn foo() {}\n\nmod bar {\n     pub fn foo() {}\n}\n\nfn main() {\n    bar::foo(); // we get the item by referring to its parent\n}\n```\n"},"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":356,"byte_end":367,"line_start":14,"line_end":14,"column_start":1,"column_end":12,"is_primary":true,"text":[{"text":"struct User {","highlight_start":1,"highlight_end":12}],"label":"`User` redefined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\main.rs","byte_start":281,"byte_end":285,"line_start":11,"line_end":11,"column_start":20,"column_end":24,"is_primary":false,"text":[{"text":"use db::{Database, User, Payment, Subscription};","highlight_start":20,"highlight_end":24}],"label":"previous import of the type `User` here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`User` must be defined only once in the type namespace of this module","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `as` to change the binding name of the import","code":null,"level":"help","spans":[{"file_name":"src\\main.rs","byte_start":285,"byte_end":285,"line_start":11,"line_end":11,"column_start":24,"column_end":24,"is_primary":true,"text":[{"text":"use db::{Database, User, Payment, Subscription};","highlight_start":24,"highlight_end":24}],"label":null,"suggested_replacement":" as OtherUser","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0255]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the name `User` is defined multiple times\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:14:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse db::{Database, User, Payment, Subscription};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mprevious import of the type `User` here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mstruct User {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`User` redefined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `User` must be defined only once in the type namespace of this module\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you can use `as` to change the binding name of the import\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0muse db::{Database, User\u001b[0m\u001b[0m\u001b[38;5;10m as OtherUser\u001b[0m\u001b[0m, Payment, Subscription};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[38;5;10m++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the name `Payment` is defined multiple times","code":{"code":"E0255","explanation":"You can't import a value whose name is the same as another value defined in the\nmodule.\n\nErroneous code example:\n\n```compile_fail,E0255\nuse bar::foo; // error: an item named `foo` is already in scope\n\nfn foo() {}\n\nmod bar {\n     pub fn foo() {}\n}\n\nfn main() {}\n```\n\nYou can use aliases in order to fix this error. Example:\n\n```\nuse bar::foo as bar_foo; // ok!\n\nfn foo() {}\n\nmod bar {\n     pub fn foo() {}\n}\n\nfn main() {}\n```\n\nOr you can reference the item with its parent:\n\n```\nfn foo() {}\n\nmod bar {\n     pub fn foo() {}\n}\n\nfn main() {\n    bar::foo(); // we get the item by referring to its parent\n}\n```\n"},"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":530,"byte_end":544,"line_start":21,"line_end":21,"column_start":1,"column_end":15,"is_primary":true,"text":[{"text":"struct Payment {","highlight_start":1,"highlight_end":15}],"label":"`Payment` redefined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\main.rs","byte_start":287,"byte_end":294,"line_start":11,"line_end":11,"column_start":26,"column_end":33,"is_primary":false,"text":[{"text":"use db::{Database, User, Payment, Subscription};","highlight_start":26,"highlight_end":33}],"label":"previous import of the type `Payment` here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`Payment` must be defined only once in the type namespace of this module","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"you can use `as` to change the binding name of the import","code":null,"level":"help","spans":[{"file_name":"src\\main.rs","byte_start":294,"byte_end":294,"line_start":11,"line_end":11,"column_start":33,"column_end":33,"is_primary":true,"text":[{"text":"use db::{Database, User, Payment, Subscription};","highlight_start":33,"highlight_end":33}],"label":null,"suggested_replacement":" as OtherPayment","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0255]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the name `Payment` is defined multiple times\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:21:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse db::{Database, User, Payment, Subscription};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mprevious import of the type `Payment` here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mstruct Payment {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`Payment` redefined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `Payment` must be defined only once in the type namespace of this module\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: you can use `as` to change the binding name of the import\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0muse db::{Database, User, Payment\u001b[0m\u001b[0m\u001b[38;5;10m as OtherPayment\u001b[0m\u001b[0m, Subscription};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `Payment`, `Subscription`, and `User`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\main.rs","byte_start":281,"byte_end":285,"line_start":11,"line_end":11,"column_start":20,"column_end":24,"is_primary":true,"text":[{"text":"use db::{Database, User, Payment, Subscription};","highlight_start":20,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\main.rs","byte_start":287,"byte_end":294,"line_start":11,"line_end":11,"column_start":26,"column_end":33,"is_primary":true,"text":[{"text":"use db::{Database, User, Payment, Subscription};","highlight_start":26,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\main.rs","byte_start":296,"byte_end":308,"line_start":11,"line_end":11,"column_start":35,"column_end":47,"is_primary":true,"text":[{"text":"use db::{Database, User, Payment, Subscription};","highlight_start":35,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src\\main.rs","byte_start":279,"byte_end":308,"line_start":11,"line_end":11,"column_start":18,"column_end":47,"is_primary":true,"text":[{"text":"use db::{Database, User, Payment, Subscription};","highlight_start":18,"highlight_end":47}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\main.rs","byte_start":270,"byte_end":271,"line_start":11,"line_end":11,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"use db::{Database, User, Payment, Subscription};","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\main.rs","byte_start":308,"byte_end":309,"line_start":11,"line_end":11,"column_start":47,"column_end":48,"is_primary":true,"text":[{"text":"use db::{Database, User, Payment, Subscription};","highlight_start":47,"highlight_end":48}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused imports: `Payment`, `Subscription`, and `User`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:11:20\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse db::{Database, User, Payment, Subscription};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":2778,"byte_end":2797,"line_start":96,"line_end":96,"column_start":8,"column_end":27,"is_primary":true,"text":[{"text":"    if verification_result {","highlight_start":8,"highlight_end":27}],"label":"expected `bool`, found `()`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\main.rs","byte_start":2778,"byte_end":2797,"line_start":96,"line_end":96,"column_start":8,"column_end":27,"is_primary":false,"text":[{"text":"    if verification_result {","highlight_start":8,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `if` or `while` condition","def_site_span":{"file_name":"src\\main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:96:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m96\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    if verification_result {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `bool`, found `()`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"struct `Payment` has no field named `token`","code":{"code":"E0560","explanation":"An unknown field was specified into a structure.\n\nErroneous code example:\n\n```compile_fail,E0560\nstruct Simba {\n    mother: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 };\n// error: structure `Simba` has no field named `father`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nstruct Simba {\n    mother: u32,\n    father: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 }; // ok!\n```\n"},"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":2944,"byte_end":2949,"line_start":100,"line_end":100,"column_start":13,"column_end":18,"is_primary":true,"text":[{"text":"            token: payment.token.clone(),","highlight_start":13,"highlight_end":18}],"label":"`Payment` does not have this field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"all struct fields are already assigned","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0560]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: struct `Payment` has no field named `token`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:100:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            token: payment.token.clone(),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`Payment` does not have this field\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: all struct fields are already assigned\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no field `token` on type `Json<PaymentVerification>`","code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":2959,"byte_end":2964,"line_start":100,"line_end":100,"column_start":28,"column_end":33,"is_primary":true,"text":[{"text":"            token: payment.token.clone(),","highlight_start":28,"highlight_end":33}],"label":"unknown field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"available field is: `0`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"available fields are: `tx_hash`, `network`, `email`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: no field `token` on type `Json<PaymentVerification>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:100:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            token: payment.token.clone(),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munknown field\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: available field is: `0`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: available fields are: `tx_hash`, `network`, `email`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"struct `Payment` has no field named `amount`","code":{"code":"E0560","explanation":"An unknown field was specified into a structure.\n\nErroneous code example:\n\n```compile_fail,E0560\nstruct Simba {\n    mother: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 };\n// error: structure `Simba` has no field named `father`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nstruct Simba {\n    mother: u32,\n    father: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 }; // ok!\n```\n"},"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":2987,"byte_end":2993,"line_start":101,"line_end":101,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"            amount: payment.amount,","highlight_start":13,"highlight_end":19}],"label":"`Payment` does not have this field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"all struct fields are already assigned","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0560]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: struct `Payment` has no field named `amount`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:101:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m101\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            amount: payment.amount,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`Payment` does not have this field\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: all struct fields are already assigned\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no field `amount` on type `Json<PaymentVerification>`","code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":3003,"byte_end":3009,"line_start":101,"line_end":101,"column_start":29,"column_end":35,"is_primary":true,"text":[{"text":"            amount: payment.amount,","highlight_start":29,"highlight_end":35}],"label":"unknown field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"available field is: `0`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"available fields are: `tx_hash`, `network`, `email`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: no field `amount` on type `Json<PaymentVerification>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:101:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m101\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            amount: payment.amount,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munknown field\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: available field is: `0`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: available fields are: `tx_hash`, `network`, `email`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"struct `Payment` has no field named `verification_status`","code":{"code":"E0560","explanation":"An unknown field was specified into a structure.\n\nErroneous code example:\n\n```compile_fail,E0560\nstruct Simba {\n    mother: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 };\n// error: structure `Simba` has no field named `father`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nstruct Simba {\n    mother: u32,\n    father: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 }; // ok!\n```\n"},"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":3111,"byte_end":3130,"line_start":104,"line_end":104,"column_start":13,"column_end":32,"is_primary":true,"text":[{"text":"            verification_status: \"verified\".to_string(),","highlight_start":13,"highlight_end":32}],"label":"`Payment` does not have this field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"all struct fields are already assigned","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0560]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: struct `Payment` has no field named `verification_status`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:104:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            verification_status: \"verified\".to_string(),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`Payment` does not have this field\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: all struct fields are already assigned\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"struct `Payment` has no field named `plan_type`","code":{"code":"E0560","explanation":"An unknown field was specified into a structure.\n\nErroneous code example:\n\n```compile_fail,E0560\nstruct Simba {\n    mother: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 };\n// error: structure `Simba` has no field named `father`\n```\n\nVerify you didn't misspell the field's name or that the field exists. Example:\n\n```\nstruct Simba {\n    mother: u32,\n    father: u32,\n}\n\nlet s = Simba { mother: 1, father: 0 }; // ok!\n```\n"},"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":3169,"byte_end":3178,"line_start":105,"line_end":105,"column_start":13,"column_end":22,"is_primary":true,"text":[{"text":"            plan_type: payment.plan_type.clone(),","highlight_start":13,"highlight_end":22}],"label":"`Payment` does not have this field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"all struct fields are already assigned","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0560]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: struct `Payment` has no field named `plan_type`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:105:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            plan_type: payment.plan_type.clone(),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`Payment` does not have this field\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: all struct fields are already assigned\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no field `plan_type` on type `Json<PaymentVerification>`","code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":3188,"byte_end":3197,"line_start":105,"line_end":105,"column_start":32,"column_end":41,"is_primary":true,"text":[{"text":"            plan_type: payment.plan_type.clone(),","highlight_start":32,"highlight_end":41}],"label":"unknown field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"available field is: `0`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"available fields are: `tx_hash`, `network`, `email`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: no field `plan_type` on type `Json<PaymentVerification>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:105:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            plan_type: payment.plan_type.clone(),\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munknown field\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: available field is: `0`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: available fields are: `tx_hash`, `network`, `email`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":3267,"byte_end":3278,"line_start":108,"line_end":108,"column_start":46,"column_end":57,"is_primary":true,"text":[{"text":"        if let Err(e) = database.add_payment(new_payment).await {","highlight_start":46,"highlight_end":57}],"label":"expected `db::Payment`, found `Payment`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\main.rs","byte_start":3255,"byte_end":3266,"line_start":108,"line_end":108,"column_start":34,"column_end":45,"is_primary":false,"text":[{"text":"        if let Err(e) = database.add_payment(new_payment).await {","highlight_start":34,"highlight_end":45}],"label":"arguments to this method are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`Payment` and `db::Payment` have similar names, but are actually distinct types","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`Payment` is defined in module `crate` of the current crate","code":null,"level":"note","spans":[{"file_name":"src\\main.rs","byte_start":530,"byte_end":544,"line_start":21,"line_end":21,"column_start":1,"column_end":15,"is_primary":true,"text":[{"text":"struct Payment {","highlight_start":1,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`db::Payment` is defined in module `crate::db` of the current crate","code":null,"level":"note","spans":[{"file_name":"src\\db.rs","byte_start":678,"byte_end":696,"line_start":23,"line_end":23,"column_start":1,"column_end":19,"is_primary":true,"text":[{"text":"pub struct Payment {","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"src\\db.rs","byte_start":2369,"byte_end":2385,"line_start":72,"line_end":72,"column_start":37,"column_end":53,"is_primary":false,"text":[{"text":"    pub async fn add_payment(&self, payment: Payment) -> mongodb::error::Result<()> {","highlight_start":37,"highlight_end":53}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\db.rs","byte_start":2350,"byte_end":2361,"line_start":72,"line_end":72,"column_start":18,"column_end":29,"is_primary":true,"text":[{"text":"    pub async fn add_payment(&self, payment: Payment) -> mongodb::error::Result<()> {","highlight_start":18,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:108:46\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m108\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if let Err(e) = database.add_payment(new_payment).await {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `db::Payment`, found `Payment`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14marguments to this method are incorrect\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `Payment` and `db::Payment` have similar names, but are actually distinct types\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `Payment` is defined in module `crate` of the current crate\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:21:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mstruct Payment {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `db::Payment` is defined in module `crate::db` of the current crate\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\db.rs:23:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m23\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Payment {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\db.rs:72:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m72\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub async fn add_payment(&self, payment: Payment) -> mongodb::error::Result<()> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----------------\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no field `plan_type` on type `Json<PaymentVerification>`","code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":3636,"byte_end":3645,"line_start":116,"line_end":116,"column_start":79,"column_end":88,"is_primary":true,"text":[{"text":"        if let Err(e) = database.update_subscription(&payment.email, &payment.plan_type).await {","highlight_start":79,"highlight_end":88}],"label":"unknown field","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"available field is: `0`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"available fields are: `tx_hash`, `network`, `email`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0609]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: no field `plan_type` on type `Json<PaymentVerification>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:116:79\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m116\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if let Err(e) = database.update_subscription(&payment.email, &payment.plan_type).await {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9munknown field\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: available field is: `0`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: available fields are: `tx_hash`, `network`, `email`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Bson: std::convert::From<chrono::DateTime<Utc>>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":6331,"byte_end":6332,"line_start":184,"line_end":184,"column_start":10,"column_end":11,"is_primary":true,"text":[{"text":"        <_ as ::std::convert::Into<$crate::Bson>>::into($other)","highlight_start":10,"highlight_end":11}],"label":"the trait `std::convert::From<chrono::DateTime<Utc>>` is not implemented for `Bson`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":3863,"byte_end":3884,"line_start":111,"line_end":111,"column_start":51,"column_end":72,"is_primary":false,"text":[{"text":"        $crate::bson!(@object $object [$($key)+] ($crate::bson!($value)) , $($rest)*);","highlight_start":51,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":5551,"byte_end":5620,"line_start":152,"line_end":152,"column_start":9,"column_end":78,"is_primary":false,"text":[{"text":"        $crate::bson!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":9,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":2791,"byte_end":2848,"line_start":86,"line_end":86,"column_start":9,"column_end":66,"is_primary":false,"text":[{"text":"        $crate::bson!(@object $object () ($($rest)*) ($($rest)*));","highlight_start":9,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":3821,"byte_end":3898,"line_start":111,"line_end":111,"column_start":9,"column_end":86,"is_primary":false,"text":[{"text":"        $crate::bson!(@object $object [$($key)+] ($crate::bson!($value)) , $($rest)*);","highlight_start":9,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":5551,"byte_end":5620,"line_start":152,"line_end":152,"column_start":9,"column_end":78,"is_primary":false,"text":[{"text":"        $crate::bson!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":9,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":6853,"byte_end":6905,"line_start":211,"line_end":211,"column_start":9,"column_end":61,"is_primary":false,"text":[{"text":"        $crate::bson!(@object object () ($($tt)+) ($($tt)+));","highlight_start":9,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":6201,"byte_end":6222,"line_start":178,"line_end":178,"column_start":32,"column_end":53,"is_primary":false,"text":[{"text":"        $crate::Bson::Document($crate::doc!{$($tt)+})","highlight_start":32,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":3625,"byte_end":3650,"line_start":106,"line_end":106,"column_start":51,"column_end":76,"is_primary":false,"text":[{"text":"        $crate::bson!(@object $object [$($key)+] ($crate::bson!({$($map)*})) $($rest)*);","highlight_start":51,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":5551,"byte_end":5620,"line_start":152,"line_end":152,"column_start":9,"column_end":78,"is_primary":false,"text":[{"text":"        $crate::bson!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":9,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":6853,"byte_end":6905,"line_start":211,"line_end":211,"column_start":9,"column_end":61,"is_primary":false,"text":[{"text":"        $crate::bson!(@object object () ($($tt)+) ($($tt)+));","highlight_start":9,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":6201,"byte_end":6222,"line_start":178,"line_end":178,"column_start":32,"column_end":53,"is_primary":false,"text":[{"text":"        $crate::Bson::Document($crate::doc!{$($tt)+})","highlight_start":32,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":3625,"byte_end":3650,"line_start":106,"line_end":106,"column_start":51,"column_end":76,"is_primary":false,"text":[{"text":"        $crate::bson!(@object $object [$($key)+] ($crate::bson!({$($map)*})) $($rest)*);","highlight_start":51,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":5551,"byte_end":5620,"line_start":152,"line_end":152,"column_start":9,"column_end":78,"is_primary":false,"text":[{"text":"        $crate::bson!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":9,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":6853,"byte_end":6905,"line_start":211,"line_end":211,"column_start":9,"column_end":61,"is_primary":false,"text":[{"text":"        $crate::bson!(@object object () ($($tt)+) ($($tt)+));","highlight_start":9,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\db.rs","byte_start":3460,"byte_end":3790,"line_start":102,"line_end":111,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            mongodb::bson::doc! {","highlight_start":13,"highlight_end":34},{"text":"                \"$set\": {","highlight_start":1,"highlight_end":26},{"text":"                    \"subscription\": {","highlight_start":1,"highlight_end":38},{"text":"                        \"plan\": plan_type,","highlight_start":1,"highlight_end":43},{"text":"                        \"start_date\": start_date,","highlight_start":1,"highlight_end":50},{"text":"                        \"end_date\": end_date,","highlight_start":1,"highlight_end":46},{"text":"                        \"status\": \"active\"","highlight_start":1,"highlight_end":43},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"mongodb::bson::doc!","def_site_span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":6710,"byte_end":6726,"line_start":207,"line_end":207,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"macro_rules! doc {","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::doc!","def_site_span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":6710,"byte_end":6726,"line_start":207,"line_end":207,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"macro_rules! doc {","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::doc!","def_site_span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":6710,"byte_end":6726,"line_start":207,"line_end":207,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"macro_rules! doc {","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `std::convert::From<T>`:\n  `Bson` implements `std::convert::From<&T>`\n  `Bson` implements `std::convert::From<&[T]>`\n  `Bson` implements `std::convert::From<&mut T>`\n  `Bson` implements `std::convert::From<&str>`\n  `Bson` implements `std::convert::From<Regex>`\n  `Bson` implements `std::convert::From<Vec<T>>`\n  `Bson` implements `std::convert::From<[u8; 12]>`\n  `Bson` implements `std::convert::From<bool>`\nand 20 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `chrono::DateTime<Utc>` to implement `Into<Bson>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `Bson: std::convert::From<chrono::DateTime<Utc>>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\db.rs:102:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m            mongodb::bson::doc! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m103\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                \"$set\": {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    \"subscription\": {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        \"plan\": plan_type,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m111\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            },\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `std::convert::From<chrono::DateTime<Utc>>` is not implemented for `Bson`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `std::convert::From<T>`:\u001b[0m\n\u001b[0m              `Bson` implements `std::convert::From<&T>`\u001b[0m\n\u001b[0m              `Bson` implements `std::convert::From<&[T]>`\u001b[0m\n\u001b[0m              `Bson` implements `std::convert::From<&mut T>`\u001b[0m\n\u001b[0m              `Bson` implements `std::convert::From<&str>`\u001b[0m\n\u001b[0m              `Bson` implements `std::convert::From<Regex>`\u001b[0m\n\u001b[0m              `Bson` implements `std::convert::From<Vec<T>>`\u001b[0m\n\u001b[0m              `Bson` implements `std::convert::From<[u8; 12]>`\u001b[0m\n\u001b[0m              `Bson` implements `std::convert::From<bool>`\u001b[0m\n\u001b[0m            and 20 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: required for `chrono::DateTime<Utc>` to implement `Into<Bson>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::bson` which comes from the expansion of the macro `mongodb::bson::doc` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Bson: std::convert::From<chrono::DateTime<Utc>>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":6331,"byte_end":6332,"line_start":184,"line_end":184,"column_start":10,"column_end":11,"is_primary":true,"text":[{"text":"        <_ as ::std::convert::Into<$crate::Bson>>::into($other)","highlight_start":10,"highlight_end":11}],"label":"the trait `std::convert::From<chrono::DateTime<Utc>>` is not implemented for `Bson`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":3863,"byte_end":3884,"line_start":111,"line_end":111,"column_start":51,"column_end":72,"is_primary":false,"text":[{"text":"        $crate::bson!(@object $object [$($key)+] ($crate::bson!($value)) , $($rest)*);","highlight_start":51,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":5551,"byte_end":5620,"line_start":152,"line_end":152,"column_start":9,"column_end":78,"is_primary":false,"text":[{"text":"        $crate::bson!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":9,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":2791,"byte_end":2848,"line_start":86,"line_end":86,"column_start":9,"column_end":66,"is_primary":false,"text":[{"text":"        $crate::bson!(@object $object () ($($rest)*) ($($rest)*));","highlight_start":9,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":3821,"byte_end":3898,"line_start":111,"line_end":111,"column_start":9,"column_end":86,"is_primary":false,"text":[{"text":"        $crate::bson!(@object $object [$($key)+] ($crate::bson!($value)) , $($rest)*);","highlight_start":9,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":5551,"byte_end":5620,"line_start":152,"line_end":152,"column_start":9,"column_end":78,"is_primary":false,"text":[{"text":"        $crate::bson!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":9,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":2791,"byte_end":2848,"line_start":86,"line_end":86,"column_start":9,"column_end":66,"is_primary":false,"text":[{"text":"        $crate::bson!(@object $object () ($($rest)*) ($($rest)*));","highlight_start":9,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":3821,"byte_end":3898,"line_start":111,"line_end":111,"column_start":9,"column_end":86,"is_primary":false,"text":[{"text":"        $crate::bson!(@object $object [$($key)+] ($crate::bson!($value)) , $($rest)*);","highlight_start":9,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":5551,"byte_end":5620,"line_start":152,"line_end":152,"column_start":9,"column_end":78,"is_primary":false,"text":[{"text":"        $crate::bson!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":9,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":6853,"byte_end":6905,"line_start":211,"line_end":211,"column_start":9,"column_end":61,"is_primary":false,"text":[{"text":"        $crate::bson!(@object object () ($($tt)+) ($($tt)+));","highlight_start":9,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":6201,"byte_end":6222,"line_start":178,"line_end":178,"column_start":32,"column_end":53,"is_primary":false,"text":[{"text":"        $crate::Bson::Document($crate::doc!{$($tt)+})","highlight_start":32,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":3625,"byte_end":3650,"line_start":106,"line_end":106,"column_start":51,"column_end":76,"is_primary":false,"text":[{"text":"        $crate::bson!(@object $object [$($key)+] ($crate::bson!({$($map)*})) $($rest)*);","highlight_start":51,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":5551,"byte_end":5620,"line_start":152,"line_end":152,"column_start":9,"column_end":78,"is_primary":false,"text":[{"text":"        $crate::bson!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":9,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":6853,"byte_end":6905,"line_start":211,"line_end":211,"column_start":9,"column_end":61,"is_primary":false,"text":[{"text":"        $crate::bson!(@object object () ($($tt)+) ($($tt)+));","highlight_start":9,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":6201,"byte_end":6222,"line_start":178,"line_end":178,"column_start":32,"column_end":53,"is_primary":false,"text":[{"text":"        $crate::Bson::Document($crate::doc!{$($tt)+})","highlight_start":32,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":3625,"byte_end":3650,"line_start":106,"line_end":106,"column_start":51,"column_end":76,"is_primary":false,"text":[{"text":"        $crate::bson!(@object $object [$($key)+] ($crate::bson!({$($map)*})) $($rest)*);","highlight_start":51,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":5551,"byte_end":5620,"line_start":152,"line_end":152,"column_start":9,"column_end":78,"is_primary":false,"text":[{"text":"        $crate::bson!(@object $object ($($key)* $tt) ($($rest)*) ($($rest)*));","highlight_start":9,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":6853,"byte_end":6905,"line_start":211,"line_end":211,"column_start":9,"column_end":61,"is_primary":false,"text":[{"text":"        $crate::bson!(@object object () ($($tt)+) ($($tt)+));","highlight_start":9,"highlight_end":61}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\db.rs","byte_start":3460,"byte_end":3790,"line_start":102,"line_end":111,"column_start":13,"column_end":14,"is_primary":false,"text":[{"text":"            mongodb::bson::doc! {","highlight_start":13,"highlight_end":34},{"text":"                \"$set\": {","highlight_start":1,"highlight_end":26},{"text":"                    \"subscription\": {","highlight_start":1,"highlight_end":38},{"text":"                        \"plan\": plan_type,","highlight_start":1,"highlight_end":43},{"text":"                        \"start_date\": start_date,","highlight_start":1,"highlight_end":50},{"text":"                        \"end_date\": end_date,","highlight_start":1,"highlight_end":46},{"text":"                        \"status\": \"active\"","highlight_start":1,"highlight_end":43},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            },","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"mongodb::bson::doc!","def_site_span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":6710,"byte_end":6726,"line_start":207,"line_end":207,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"macro_rules! doc {","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::doc!","def_site_span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":6710,"byte_end":6726,"line_start":207,"line_end":207,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"macro_rules! doc {","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::doc!","def_site_span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":6710,"byte_end":6726,"line_start":207,"line_end":207,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"macro_rules! doc {","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::bson!","def_site_span":{"file_name":"C:\\Users\\emrea\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\bson-2.13.0\\src\\macros.rs","byte_start":389,"byte_end":406,"line_start":22,"line_end":22,"column_start":1,"column_end":18,"is_primary":false,"text":[{"text":"macro_rules! bson {","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `std::convert::From<T>`:\n  `Bson` implements `std::convert::From<&T>`\n  `Bson` implements `std::convert::From<&[T]>`\n  `Bson` implements `std::convert::From<&mut T>`\n  `Bson` implements `std::convert::From<&str>`\n  `Bson` implements `std::convert::From<Regex>`\n  `Bson` implements `std::convert::From<Vec<T>>`\n  `Bson` implements `std::convert::From<[u8; 12]>`\n  `Bson` implements `std::convert::From<bool>`\nand 20 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `chrono::DateTime<Utc>` to implement `Into<Bson>`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `Bson: std::convert::From<chrono::DateTime<Utc>>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\db.rs:102:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m            mongodb::bson::doc! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m103\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                \"$set\": {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    \"subscription\": {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        \"plan\": plan_type,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m111\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            },\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `std::convert::From<chrono::DateTime<Utc>>` is not implemented for `Bson`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `std::convert::From<T>`:\u001b[0m\n\u001b[0m              `Bson` implements `std::convert::From<&T>`\u001b[0m\n\u001b[0m              `Bson` implements `std::convert::From<&[T]>`\u001b[0m\n\u001b[0m              `Bson` implements `std::convert::From<&mut T>`\u001b[0m\n\u001b[0m              `Bson` implements `std::convert::From<&str>`\u001b[0m\n\u001b[0m              `Bson` implements `std::convert::From<Regex>`\u001b[0m\n\u001b[0m              `Bson` implements `std::convert::From<Vec<T>>`\u001b[0m\n\u001b[0m              `Bson` implements `std::convert::From<[u8; 12]>`\u001b[0m\n\u001b[0m              `Bson` implements `std::convert::From<bool>`\u001b[0m\n\u001b[0m            and 20 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: required for `chrono::DateTime<Utc>` to implement `Into<Bson>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::bson` which comes from the expansion of the macro `mongodb::bson::doc` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `clone` found for struct `db::Database` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":5245,"byte_end":5250,"line_start":164,"line_end":164,"column_start":47,"column_end":52,"is_primary":true,"text":[{"text":"            .app_data(web::Data::new(database.clone()))","highlight_start":47,"highlight_end":52}],"label":"method not found in `Database`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\db.rs","byte_start":1050,"byte_end":1069,"line_start":34,"line_end":34,"column_start":1,"column_end":20,"is_primary":false,"text":[{"text":"pub struct Database {","highlight_start":1,"highlight_end":20}],"label":"method `clone` not found for this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"items from traits can only be used if the trait is implemented and in scope","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"the following trait defines an item `clone`, perhaps you need to implement it:\ncandidate #1: `Clone`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: no method named `clone` found for struct `db::Database` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:164:47\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .app_data(web::Data::new(database.clone()))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `Database`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0msrc\\db.rs:34:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m34\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Database {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mmethod `clone` not found for this struct\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: items from traits can only be used if the trait is implemented and in scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: the following trait defines an item `clone`, perhaps you need to implement it:\u001b[0m\n\u001b[0m            candidate #1: `Clone`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 16 previous errors; 1 warning emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 16 previous errors; 1 warning emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0255, E0277, E0308, E0560, E0599, E0609.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mSome errors have detailed explanations: E0255, E0277, E0308, E0560, E0599, E0609.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0255`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about an error, try `rustc --explain E0255`.\u001b[0m\n"}
